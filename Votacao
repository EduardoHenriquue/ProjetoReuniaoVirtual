package br.ufpb.dce.poo.ReunioesVirtuais.Votacao;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;




public class Votacao {
	
	
	
	List<Usuario> usuariosVotantes;
	
	private String idAssunto;
	private String descricao;
	private int horas; 
	
	
	private Map<String, Integer> opcoes = new HashMap<String, Integer>();

	public Votacao(String idAssunto, String descricao, int horas){
		this.horas = horas;
		this.idAssunto = idAssunto;
		this.descricao = descricao;
		this.usuariosVotantes = new LinkedList<Usuario>();
	}

	
	public void addOpcao(String opcao){
		this.opcoes.put(opcao, new Integer(0));
	}
	
	
	/**
	 * Conta o tempo da votação
	 * 
	 * @return boolean flag após término de execução do método
	 */
	public boolean tempoLimite(){
		int minutos = 1; 		
		int tempo = horas * minutos;
		boolean flag = false;
	    try{  
	    	for (int i = tempo; i > 0; i--){  	    			                
	            	Thread.sleep(1000*minutos); // 1 segundo
	        }
	    	flag = true;
	    	System.out.println("Votação finalizada, tempo esgotado!");  
	            
	     }catch (InterruptedException e){  
	        System.out.println("Votação interrompida!");  
	     }
		return flag;     
	}
	
	
	/**
	 * 
	 * @param opcao
	 * @param usuario
	 * @throws VotoInvalidoRunTimeException
	 * @throws UsuarioExistenteRunTimeException
	 * @throws TempoEsgotadoException
	 */
	public void votar(String opcao, Usuario usuario) throws VotoInvalidoRunTimeException, UsuarioExistenteRunTimeException, TempoEsgotadoException{
		try{
			if(tempoLimite()){
				if((opcoes.containsKey(opcao)) && !(usuariosVotantes.contains(usuario))){
					int voto = this.opcoes.get(opcao).intValue();
					this.opcoes.put(opcao, new Integer(++voto));
					this.usuariosVotantes.add(usuario);
				} else if(usuariosVotantes.contains(usuario)){
					throw new UsuarioExistenteRunTimeException("Opcão Inválida!");
	
				}
				else {
					throw new VotoInvalidoRunTimeException("Opcão Inválida!");
				}
			}
			else{
				throw new TempoEsgotadoException("Tempo Esgotado!");
			}
		}catch (TempoEsgotadoException e){  
	        System.out.println("Votação interrompida!");  
		}
		
	}
	

	public int getVotos(String opcao){
		return (opcoes.get(opcao)).intValue();
	}
	
	
	public void getResultado(){
		
			System.out.println("Resultado da votação: "+opcoes.toString()); // imprime os votos
			
		
	}
	
		

}
