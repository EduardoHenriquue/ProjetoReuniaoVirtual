package br.ufpb.dce.poo.ReunioesVirtuais.Votacao;

import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


public class Votacao {
	
	private Map<String, Integer> opcoes = new HashMap<String, Integer>();
	private List<String> usuarios;
	private String idAssunto;
	private String descricao;
	private int duracao; 
	Date dataInicio ;
	
	public Votacao(String idAssunto, String descricao, int duracao){
		this.dataInicio = new Date();
		this.dataInicio.setHours(dataInicio.getHours() + duracao);
		this.duracao = duracao;
		this.idAssunto = idAssunto;
		this.descricao = descricao;
		this.usuarios = new LinkedList<String>();
	}
	
	public Votacao(){
		
	}

	public void addOpcao(String opcao){
		this.opcoes.put(opcao, new Integer(0));
	}
	
	
	/** 
	 *  Método que acrecenta os votos as opcoes contidas no map opcoes
	 * @param opcao
	 * @param usuario
	 * @throws VotoInvalidoRunTimeException
	 * @throws UsuarioExistenteRunTimeException
	 * @throws TempoEsgotadoRunTimeException 
	 */
	public void votar(String opcao, String usuario) throws ListaVaziaRuntimeException, VotoInvalidoRuntimeException, UsuarioExistenteRuntimeException, TempoEsgotadoRuntimeException{
		
		Date dataAtual = new Date(); // Inicializa a data do dia	
		try{
			// Passa a data do dia para o método que irá comparar com a data limite para efetuar a votação
			if (!(tempoLimite(dataAtual))){
			
				// verifica se o map opçoes está vazio
				if(!(this.opcoes.isEmpty())){
				
					// verifica se o usuário ainda não efetuou voto 
					if(!this.pesquisaUsuario(usuario)){ 
						
						// verificar se a opção passada está no map opcoes
						if(this.opcoes.containsKey(opcao)){ 
							int voto = this.opcoes.get(opcao).intValue();
							this.opcoes.put(opcao, new Integer(++voto));
							this.usuarios.add(usuario);
						}
						else {
							throw new VotoInvalidoRuntimeException("Opcão Inválida!"); 
						}
					}
				}
				else {
					throw new ListaVaziaRuntimeException("Não há Opções adicionadas!");
				}
			}
			else if(this.duracao < 0){ // Caso informem um número negativo
				throw new TempoEsgotadoRuntimeException("Apenas números positivos para a duração da Reunião!");
			}
			else {
				throw new TempoEsgotadoRuntimeException("A Votação já foi encerrada!");
			}
		}
		catch(Exception e){
			System.out.println(e.getMessage());
		}
	}
	
	
	/**
	 * Delimita o tempo da votação comparando a data inicio com a data atual
	 * 
	 * @return boolean 
	 */
	public boolean tempoLimite(Date dataAtual){			
		boolean acabou = false;
		
		Date dataFinal = new Date();
		
		dataFinal = dataInicio;
		try{
			if (dataAtual.after(dataFinal)){
				acabou = true;
				return acabou;		
			}
		} 
		catch(Exception e){
			System.out.println(e.getMessage());
		}
		return acabou;
	}
	
	/**
	 * Retorna o o resultado da votação
	 * @return
	 */
	public String getResultado(){		
		return "Resultado da votação: " + opcoes.toString();			
	}
	
	
	/**
	 *  Verifica se o usuário está na lista de usuários que já votaram
	 * @param usuario
	 * @return boolean
	 */
	public boolean pesquisaUsuario(String usuario){
		boolean existe = false;
		try{
			for(String us: this.usuarios){
				if(us.equals(usuario)){
					existe = true;
					throw new UsuarioExistenteRuntimeException("O Usuario já votou!"); 
				}
			}
		}
		catch(Exception e){
			System.out.println(e.getMessage());
		}
		return existe;
	}	

}
